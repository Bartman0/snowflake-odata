{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Primary location for resources"
            }
        },
        "projectName": {
            "type": "string",
            "metadata": {
                "description": "Lowercase lengte 3-8, Klant plus subproject."
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "tst",
                "acc",
                "uat",
                "prd",
                "lab"
            ],
            "metadata": {
                "description": "Stage of the deployment environment"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "snowflake-odata",
            "metadata": {
                "description": "Subnet name"
            }
        },
        "containerName": {
            "type": "string",
            "defaultValue": "snowflake-odata",
            "metadata": {
                "description": "Container name"
            }
        },
        "containerImage": {
            "type": "string",
            "metadata": {
                "description": "Container image to deploy. Should be of the form accountName/imagename:tag for images stored in Docker Hub or a fully qualified URI for a private registry like the Azure Container Registry."
            },
            "defaultValue": "snowflake-odata"
        },
        "containerTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Tag van de container"
            }
        },
        "containerCommand": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Command to start process in container"
            }
        },
        "cpuCores": {
            "type": "string",
            "metadata": {
                "description": "The number of CPU cores to allocate to the container. Must be an integer."
            },
            "defaultValue": "2.0"
        },
        "memoryInGb": {
            "type": "string",
            "metadata": {
                "description": "The amount of memory to allocate to the container in gigabytes."
            },
            "defaultValue": "4.0"
        },
        "containerRegistryServer": {
            "type": "string",
            "defaultValue": "hansanders.azurecr.io",
            "metadata": {
                "description": "Container registry server"
            }
        },
        "containerRegistryUser": {
            "type": "string",
            "metadata": {
                "description": "Service principal ClienId voor de registry connectie"
            }
        },
        "containerRegistryPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password voor de registry connectie"
            }
        },
        "keyvaultUrl": {
            "type": "string",
            "defaultValue": "[concat('https://', parameters('projectName'), '-', parameters('environment'), '.vault.azure.net/')]",
            "metadata": {
                "description": "url van de keyvault met configuratie gegevens"
            }
        },
        "keyvaultName": {
            "type": "string",
            "defaultValue": "[concat(parameters('projectName'), '-', parameters('environment'))]",
            "metadata": {
                "description": "url van de keyvault met configuratie gegevens"
            }
        },
        "state": {
            "type": "string",
            "defaultValue": "Disabled",
            "metadata": {
                "description": "description"
            }
        },
        "servicePort": {
            "type": "string",
            "metadata": {
                "description": "Port to open on the container and the public IP address."
            },
            "defaultValue": "8080"
        }
    },
    "variables": {
        "networkProfileName": "[concat(parameters('projectName'), '-', parameters('environment'),'-', parameters('subnetName'), '-aci-profile')]",
        "interfaceConfigName": "eth0",
        "interfaceIpConfig": "[concat(parameters('projectName'), '-', parameters('environment'), '-', parameters('subnetName'), '-aci-ipconfig')]",
        "containerGroupName": "[concat(parameters('projectName'), '-', parameters('environment'), '-',parameters('containerName'))]",
        "workspaceName": "[concat(parameters('projectName'), '-', parameters('environment'))]",
        "vnetName": "[concat(parameters('projectName'), '-', parameters('environment'))]",
        "logicAppName": "[concat(parameters('projectName'), '-', parameters('environment'),'-',parameters('containerName'))]",
        "webhook": "[concat('https://management.azure.com/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ContainerInstance/containerGroups/', variables('containerGroupName'), '/start?api-version=2018-10-01')]",
        "ContributorRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
    },
    "resources": [
        {
            "name": "[variables('networkProfileName')]",
            "type": "Microsoft.Network/networkProfiles",
            "apiVersion": "2020-05-01",
            "location": "[parameters('location')]",
            "properties": {
                "containerNetworkInterfaceConfigurations": [
                    {
                        "name": "[variables('interfaceConfigName')]",
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "[variables('interfaceIpConfig')]",
                                    "properties": {
                                        "subnet": {
                                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), parameters('subnetName'))]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('containerGroupName')]",
            "type": "Microsoft.ContainerInstance/containerGroups",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileName'))]"
            ],
            "properties": {
                "imageRegistryCredentials": [
                    {
                        "server": "[parameters('containerRegistryServer')]",
                        "username": "[parameters('containerRegistryUser')]",
                        "password": "[parameters('containerRegistryPassword')]"
                    }
                ],
                "diagnostics": {
                    "logAnalytics": {
                        "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), '2017-03-15-preview').customerId]",
                        "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')), '2015-11-01-preview')['primarySharedKey']]"
                    }
                },
                "containers": [
                    {
                        "name": "[parameters('containerName')]",
                        "properties": {
                            "image": "[concat(parameters('containerRegistryServer'),'/',parameters('containerImage'),':', parameters('containerTag'))]",
                            "command": "[parameters('containerCommand')]",
                            "environmentVariables": [
                                {
                                    "name": "KEY_VAULT_URI",
                                    "value": "[parameters('keyvaultUrl')]"
                                },
                                {
                                    "name": "KEY_VAULT_NAME",
                                    "value": "[parameters('keyvaultName')]"
                                },
                                {
                                    "name": "AZURE_TENANT_ID",
                                    "value": "[subscription().tenantId]"
                                },
                                {
                                    "name": "AZURE_CLIENT_ID",
                                    "value": "[parameters('containerRegistryUser')]"
                                },
                                {
                                    "name": "AZURE_CLIENT_SECRET",
                                    "secureValue": "[parameters('containerRegistryPassword')]"
                                }
                            ],
                            "volumeMounts": [],
                            "resources": {
                                "requests": {
                                    "cpu": "[parameters('cpuCores')]",
                                    "memoryInGB": "[parameters('memoryInGb')]"
                                }
                            },
                            "ports": [
                                {
                                    "port": "[parameters('servicePort')]" 
                                }
                            ]
                        }
                    }
                ],
                "osType": "Linux",
                "networkProfile": {
                    "id": "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileName'))]"
                },
                "restartPolicy": "Never"
            }
        }
    ]
}
